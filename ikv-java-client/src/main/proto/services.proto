syntax = "proto3";
package com.inlineio.schemas;

import "google/protobuf/timestamp.proto";
import "common.proto";

service InlineKVWriteService {
  // Write methods
  rpc upsertFieldValues(UpsertFieldValuesRequest) returns (SuccessStatus) {}
  rpc batchUpsertFieldValues(BatchUpsertFieldValuesRequest) returns (SuccessStatus) {}
  rpc deleteFieldValues(DeleteFieldValueRequest) returns (SuccessStatus) {}
  rpc batchDeleteFieldValues(BatchDeleteFieldValuesRequest) returns (SuccessStatus) {}
  rpc deleteDocument(DeleteDocumentRequest) returns (SuccessStatus) {}
  rpc batchDeleteDocuments(BatchDeleteDocumentsRequest) returns (SuccessStatus) {}

  // Store Management
  rpc userStoreSchemaUpdate(UserStoreSchemaUpdateRequest) returns (SuccessStatus) {}
}

message UpsertFieldValuesRequest {
  IKVDocumentOnWire document = 1;
  google.protobuf.Timestamp timestamp = 2;
  UserStoreContextInitializer userStoreContextInitializer = 3;
}

message BatchUpsertFieldValuesRequest {
  repeated IKVDocumentOnWire documents = 1;
  google.protobuf.Timestamp timestamp = 2;
  UserStoreContextInitializer userStoreContextInitializer = 3;
}

// Delete fields from a document.
message DeleteFieldValueRequest {
  IKVDocumentOnWire documentId = 1;
  repeated string fieldNames = 2;
  google.protobuf.Timestamp timestamp = 3;
  UserStoreContextInitializer userStoreContextInitializer = 4;
}

// Delete fields from a batch of documents.
message BatchDeleteFieldValuesRequest {
  repeated IKVDocumentOnWire documentIds = 1;
  repeated string fieldNames = 2;
  google.protobuf.Timestamp timestamp = 3;
  UserStoreContextInitializer userStoreContextInitializer = 4;
}

// Delete a document.
message DeleteDocumentRequest {
  IKVDocumentOnWire documentId = 1;
  google.protobuf.Timestamp timestamp = 2;
  UserStoreContextInitializer userStoreContextInitializer = 3;
}

// Delete a batch of documents.
message BatchDeleteDocumentsRequest {
  repeated IKVDocumentOnWire documentIds = 1;
  google.protobuf.Timestamp timestamp = 2;
  UserStoreContextInitializer userStoreContextInitializer = 3;
}

message UserStoreSchemaUpdateRequest {
  UserStoreContextInitializer userStoreContextInitializer = 1;

  // duplicates (exact match) are ignored
  // conflicts throw an error (ex. re-registering with different type)
  repeated FieldSchema newFieldsToAdd = 2;
}

message SuccessStatus {
}

// Used to construct UserStoreContext -
// used for schema/configuration/etc.
message UserStoreContextInitializer {
  AccountCredentials credentials = 1;
  string storeName = 2;
}

message AccountCredentials {
  string accountId = 1;
  string accountPasskey = 2;
}